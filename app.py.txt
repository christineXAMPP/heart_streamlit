# app.py
import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from joblib import load

st.set_page_config(page_title="Heart Disease Predictor", layout="centered")

@st.cache_resource
def load_artifacts():
    model = load("model_knn.joblib")
    scaler = load("scaler.joblib")
    try:
        df = pd.read_csv("heart.csv")
    except Exception:
        df = None
    return model, scaler, df

model, scaler, df = load_artifacts()

st.title("Heart Disease Predictor (Streamlit)")

st.sidebar.header("Patient Input")
age = st.sidebar.number_input("Age", min_value=1, max_value=120, value=50)
sex = st.sidebar.selectbox("Sex (0=female, 1=male)", options=[0,1], index=1)
cp = st.sidebar.number_input("Chest pain type (cp)", min_value=0, max_value=3, value=0)
trestbps = st.sidebar.number_input("Resting blood pressure (trestbps)", min_value=50, max_value=250, value=130)
chol = st.sidebar.number_input("Cholesterol (chol)", min_value=100, max_value=600, value=250)
fbs = st.sidebar.selectbox("Fasting blood sugar >120 mg/dl (fbs)", options=[0,1], index=0)
restecg = st.sidebar.number_input("Resting ECG (restecg)", min_value=0, max_value=2, value=0)
thalach = st.sidebar.number_input("Max heart rate achieved (thalach)", min_value=50, max_value=250, value=150)
exang = st.sidebar.selectbox("Exercise induced angina (exang)", options=[0,1], index=0)
oldpeak = st.sidebar.number_input("ST depression (oldpeak)", value=1.0, format="%.2f")
slope = st.sidebar.number_input("Slope of peak exercise ST (slope)", min_value=0, max_value=2, value=1)
ca = st.sidebar.number_input("Number of major vessels (ca)", min_value=0, max_value=4, value=0)
thal = st.sidebar.number_input("Thalassemia (thal)", min_value=0, max_value=3, value=2)

if st.button("Predict"):
    x = np.array([[age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal]])
    try:
        x_scaled = scaler.transform(x)
    except Exception as e:
        st.error(f"Error scaling input: {e}")
    else:
        pred = int(model.predict(x_scaled)[0])
        prob = None
        if hasattr(model, "predict_proba"):
            prob = float(model.predict_proba(x_scaled)[0][pred])
        label = "Heart Disease" if pred == 1 else "No Heart Disease"
        st.subheader("Prediction Result")
        st.write(f"**Label:** {label}")
        if prob is not None:
            st.write(f"**Confidence:** {prob*100:.1f}%")
        st.caption("Model feature order: age, sex, cp, trestbps, chol, fbs, restecg, thalach, exang, oldpeak, slope, ca, thal")

if df is not None:
    st.header("Exploratory Visuals (dataset)")
    st.write("Distribution of heart disease cases")
    fig1, ax1 = plt.subplots(figsize=(6,4))
    sns.countplot(x='target', data=df, palette='coolwarm', ax=ax1)
    ax1.set_xlabel("Heart Disease (1 = Yes, 0 = No)")
    st.pyplot(fig1)

    st.write("Age vs Cholesterol by Heart Disease status")
    fig2, ax2 = plt.subplots(figsize=(8,6))
    sns.scatterplot(x='age', y='chol', hue='target', data=df, palette='coolwarm', ax=ax2)
    st.pyplot(fig2)

    st.write("Cholesterol levels by Heart Disease status (boxplot)")
    fig3, ax3 = plt.subplots(figsize=(8,6))
    sns.boxplot(x='target', y='chol', data=df, palette='Set2', ax=ax3)
    st.pyplot(fig3)

    st.write("Resting blood pressure distribution")
    fig4, ax4 = plt.subplots(figsize=(8,6))
    sns.histplot(df['trestbps'], bins=30, kde=True, ax=ax4)
    st.pyplot(fig4)
else:
    st.info("Dataset file `heart.csv` not found â€” include it in the folder to show plots.")

st.markdown("---")
st.write("To deploy: push to GitHub and use Streamlit Community Cloud (share.streamlit.io).")
